<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.youyu.conference.repository.biz.ActivityUserBizMapper">
    <resultMap id="UserInfoVM" type="com.youyu.conference.web.vm.UserInfoVM">
        <id column="id" jdbcType="BIGINT" property="id"/>
        <result column="user_name" jdbcType="VARCHAR" property="userName"/>
        <result column="user_number" jdbcType="VARCHAR" property="userNumber"/>
        <result column="user_city" jdbcType="VARCHAR" property="userCity"/>
        <result column="user_country" jdbcType="INTEGER" property="userCountry"/>
        <result column="work_status" jdbcType="INTEGER" property="workStatus"/>
        <result column="vote_count" jdbcType="INTEGER" property="voteCount"/>
        <result column="score" jdbcType="INTEGER" property="score"/>
    </resultMap>
    <resultMap id="ScoreBillboardVM" type="com.youyu.conference.web.vm.ScoreBillboardVM">
        <id column="user_id" jdbcType="BIGINT" property="userId"/>
        <result column="user_name" jdbcType="VARCHAR" property="userName"/>
        <result column="user_number" jdbcType="VARCHAR" property="userNumber"/>
        <result column="score" jdbcType="INTEGER" property="score"/>
        <result column="rownum" jdbcType="INTEGER" property="rownum"/>
    </resultMap>
    <resultMap id="WorkListOutVM" type="com.youyu.conference.web.vm.WorkEnrollListOutVM">
        <id column="id" jdbcType="BIGINT" property="workId"/>
        <result column="user_id" jdbcType="BIGINT" property="userId"/>
        <result column="user_name" jdbcType="VARCHAR" property="userName"/>
        <result column="work_url" jdbcType="VARCHAR" property="workUrl"/>
        <result column="work_head_img" jdbcType="VARCHAR" property="workHeadImg"/>
        <result column="work_desc" jdbcType="VARCHAR" property="workDesc"/>
        <result column="work_type" jdbcType="INTEGER" property="workType"/>
        <result column="work_pv" jdbcType="INTEGER" property="workPv"/>
        <result column="work_like" jdbcType="INTEGER" property="workLike"/>
        <result column="work_vote" jdbcType="INTEGER" property="workVote"/>
        <result column="work_status" jdbcType="INTEGER" property="workStatus"/>

    </resultMap>

    <select id="selectUserInfo" resultMap="UserInfoVM">
        SELECT cu.id, user_name, user_number, user_city, user_country
            , IFNULL(uew.work_status,30) AS work_status,
            (2-(SELECT COUNT(1) FROM user_enroll_work_event uewe WHERE uewe.send_user_id = cu.id AND uewe.event_type = 3)) AS vote_count
        FROM custom_user cu
            LEFT JOIN user_enroll_work uew
            ON cu.id = uew.user_id
                AND uew.work_type = 1
                WHERE cu.id = #{userId}
    </select>

    <select id="selectScoreBillboard" resultMap="ScoreBillboardVM">
        SELECT t2.user_id,t2.user_name,t2.user_number,t2.score,t2.rownum
        FROM (
            SELECT t1.*, @rownum := @rownum + 1 AS rownum
            FROM (
                SELECT @rownum := 0
            ) r, (
                    SELECT id as user_id, user_name, user_number
                        , IFNULL(score, 0) AS score
                    FROM custom_user
                        LEFT JOIN (
                            SELECT user_id, sum(score) AS score
                            FROM user_score_record
                            GROUP BY user_id
                        ) score_billboard
                        ON custom_user.id = score_billboard.user_id
                    ORDER BY score_billboard.score DESC,custom_user.id ASC
                ) t1
        ) t2
    </select>

    <select id="selectMyBillboard" resultType="long">
        SELECT t2.rownum
        FROM (
            SELECT t1.*, @rownum := @rownum + 1 AS rownum
            FROM (
                SELECT @rownum := 0
            ) r, (
                    SELECT id as user_id, user_name, user_number
                        , IFNULL(score, 0) AS score
                    FROM custom_user
                        LEFT JOIN (
                            SELECT user_id, sum(score) AS score
                            FROM user_score_record
                            GROUP BY user_id
                        ) score_billboard
                        ON custom_user.id = score_billboard.user_id
                    ORDER BY score_billboard.score DESC,custom_user.id ASC
                ) t1
        ) t2 WHERE t2.user_id = #{userId};
    </select>

    <select id="selectWorkList" resultMap="WorkListOutVM">
        SELECT t1.id, t1.user_id, t1.work_url, t1.work_head_img, t1.work_desc
        , t1.work_type, t2.user_name, t1.work_status,t1.created_time,
        (select count(1) from user_enroll_work_event where work_id = t1.id and event_type =1) as work_pv,
        (select count(1) from user_enroll_work_event where work_id = t1.id and event_type =2) as work_like,
        (select count(1) from user_enroll_work_event where work_id = t1.id and event_type =3) as work_vote
        FROM user_enroll_work t1
        INNER JOIN custom_user t2 ON t1.user_id = t2.id
        WHERE t1.work_type = #{type}
        AND t1.work_status = 10
        <if test="type == 1">
            order by work_vote desc
        </if>
        <if test="type == 2">
            order by t1.created_time desc
        </if>
    </select>

    <select id="selectUserList" resultMap="UserInfoVM">
        SELECT cu.id, user_name, user_number, user_city, user_country
        , IFNULL(uew.work_status,30) AS work_status,
        (2-(SELECT COUNT(1) FROM user_enroll_work_event uewe WHERE uewe.send_user_id = cu.id AND uewe.event_type = 3))
        AS vote_count,ifnull(t1.score,0) as score
        FROM custom_user cu
        LEFT JOIN (select sum(score) as score,user_id from user_score_record group by user_id) as t1
        ON cu.id = t1.user_id
        LEFT JOIN user_enroll_work uew
        ON cu.id = uew.user_id
        AND uew.work_type = 1
        <where>
            <if test="queryParams.userName != null and queryParams.userName != 0">
                AND user_name = #{queryParams.userName}
            </if>
            <if test="queryParams.userNumber != null and queryParams.userNumber != 0">
                AND user_number = #{queryParams.userNumber}
            </if>
            <if test="queryParams.userCity != null and queryParams.userCity != 0">
                AND user_city = #{queryParams.userCity}
            </if>
            <if test="queryParams.state != null">
                AND login_state = #{queryParams.state}
            </if>
        </where>
        order by cu.created_time asc
    </select>
</mapper>